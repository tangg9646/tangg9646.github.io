<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 唐广的个人博客</title>
    <link>https://tangg9646.github.io/post/</link>
    <description>Recent content in Posts on 唐广的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Dec 2019 15:37:45 +0800</lastBuildDate>
    
	<atom:link href="https://tangg9646.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>朴素贝叶斯算法&#43;文本分类&#43;垃圾邮件过滤应用</title>
      <link>https://tangg9646.github.io/post/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95&#43;%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB&#43;%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%BA%94%E7%94%A8/</link>
      <pubDate>Thu, 05 Dec 2019 15:37:45 +0800</pubDate>
      
      <guid>https://tangg9646.github.io/post/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95&#43;%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB&#43;%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%BA%94%E7%94%A8/</guid>
      <description>[TOC]
一、朴素贝叶斯基础理论 这部分内容转载自：https://www.kesci.com/home/project/5cededa67a818c002b6ec64a
博主讲得很清晰，并介绍了scikit-learn中封装的库如何调用
1. 前言 机器学习中常见的一个问题就是如何把未知的数据分到先前已经知晓的类别中去。
比如我们想对一个未知的水果进行分类，而我们已经知道的分类特征如下：
如图所示，我们有三个现有的水果类别：苹果，蓝莓和椰子。
这些水果中的每一种都有三个我们关心的特征：大小，重量和颜色。
通过观察未知水果我们发现，这个水果大小适中（moderate），但是很重（heavy），并且还是红色（red）的。
我们可以将这些特征与我们已经知道的特征进行比较，由此判断它是什么类型的水果。
若未知水果像椰子一样重，但另外两个特征与苹果相同，我们将猜测它是苹果。
这个例子比较简单，但是它体现了在分类问题中的一种思想：在分类问题中，我们会将未知标签的数据集特征与我们已知标签的特征进行比较。
朴素贝叶斯，就是这样一种比较的方法。
2. 简介 朴素贝叶斯是一种分类技术，它会使用我们已知的数据概率来对未知的数据点进行分类。
这种概率和现有的数据分布以及数据的标签有关。
正如上面例子所言，我们将最类似于未知数据的分类，作为未知数据的标签。
Naive Bayes（朴素贝叶斯）技术的理论依据是贝叶斯定理（Bayes’ Theorem），在下面我们将详细阐述。
3. 贝叶斯定理 首先我们引入两个个概念：概率、条件概率
概率：事件A发生的可能性就被称为A发生的概率，用P(A)来表示
条件概率：当事件B已经发生的时候，事件A发生的可能性，称为在B条件下A发生的条件概率，用P(A|B)表示
那么针对于事件A、B同时发生的概率，就可以用P(AB)来表示
因此我们可以得出以下公式：
举个例子：
一起汽车撞人逃跑事件，已知只有两种颜色的车,比例为蓝色20% 绿色80%，目击者指证是蓝车。
但根据现场分析,当时那种条件下，目击者看车的颜色正确的可能性是60%。
那么，肇事的车是蓝车的概率到底是多少？
首先，事件B = {目击者看到车为蓝色}，事件A = {车本来就是蓝色}
4. 朴素贝叶斯理论 朴素贝叶斯的基本方法：在统计数据的基础上，依据条件概率公式，计算当前特征的样本属于某个分类的概率，选最大的概率分类
5. 算法 下面讲解一些朴素贝叶斯的基本算法，我们可以根据算法的特征类型将其分成两类。
 连续：这意味着最终的标签为实值（可以存在小数） 离散：这以为着最终的结果为分类的类别值（只能为整数）  5.1 高斯模型（连续） 高斯模型假设特征的分布是属于正态分布的。
在处理连续的特征变量时，我们应该选择使用高斯模型。
正态分布的概率密度函数如图所示：
#导入相应的包 import numpy as np #导入高斯模型 from sklearn.naive_bayes import GaussianNB #样本X包含三个特征，分别是Red的百分比，Green的百分比，Blue的百分比 #每个特征的值都是（0,1）之间的小数 #首先我们创建一个训练集 X = np.</description>
    </item>
    
    <item>
      <title>将github配置为图床&#43;PicGo配置</title>
      <link>https://tangg9646.github.io/post/%E5%B0%86github%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BE%E5%BA%8A&#43;picgo%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 04 Dec 2019 23:23:09 +0800</pubDate>
      
      <guid>https://tangg9646.github.io/post/%E5%B0%86github%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BE%E5%BA%8A&#43;picgo%E9%85%8D%E7%BD%AE/</guid>
      <description>将github配置为图床+PicGo配置 1、建一个git仓库 用于存需要上传的图片。这个仓库最好是public的，因为private的仓库，图片链接会带token，这个token又存在过期的问题。
2、获取授权token 在Github的Developer setting界面生一个token。记得保存，因为它只会显示一次。
3、配置PicGo picgo下载地址：https://molunerfinn.com/PicGo/
根据图示：
4、picgo快捷键 windows快捷键：ctrl+shift+p 快速上传剪贴板中的图片，并自动复制上传后的外链连接</description>
    </item>
    
    <item>
      <title>正则表达式基础</title>
      <link>https://tangg9646.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 02 Dec 2019 09:11:25 +0800</pubDate>
      
      <guid>https://tangg9646.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</guid>
      <description>本文转载自：
https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html
1. 正则表达式基础 1.1. 简单介绍 正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。
下图展示了使用正则表达式进行匹配的流程： 正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。
下图列出了Python支持的正则表达式元字符和语法： 1.2. 数量词的贪婪模式与非贪婪模式 正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式&amp;rdquo;ab&amp;ldquo;如果用于查找&amp;rdquo;abbbc&amp;rdquo;，将找到&amp;rdquo;abbb&amp;rdquo;。而如果使用非贪婪的数量词&amp;rdquo;ab?&amp;ldquo;，将找到&amp;rdquo;a&amp;rdquo;。
1.3. 反斜杠的困扰 与大多数编程语言相同，正则表达式里使用&amp;rdquo;\&amp;ldquo;作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符&amp;rdquo;\&amp;ldquo;，那么使用编程语言表示的正则表达式里将需要4个反斜杠&amp;rdquo;\\&amp;ldquo;：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。
Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r&amp;rdquo;\&amp;ldquo;表示。同样，匹配一个数字的&amp;rdquo;\d&amp;rdquo;可以写成r&amp;rdquo;\d&amp;rdquo;。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。
1.4. 匹配模式 正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，
这部分内容将在Pattern类的工厂方法re.compile(pattern[, flags])中一起介绍。
2. re模块 2.1. 开始使用re Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。
# encoding: UTF-8 import re # 将正则表达式编译成Pattern对象 pattern = re.compile(r&#39;hello&#39;) # 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None match = pattern.match(&#39;hello world!&#39;) if match: # 使用Match获得分组信息 print match.group() ### 输出 ### # hello  re.compile(strPattern[, flag]):
这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。
第二个参数flag是匹配模式，取值可以使用按位或运算符&amp;rsquo;|&amp;lsquo;表示同时生效，比如re.I | re.M。
另外，你也可以在regex字符串中指定模式，比如re.compile(&amp;lsquo;pattern&amp;rsquo;, re.I | re.M)与re.compile(&amp;lsquo;(?im)pattern&amp;rsquo;)是等价的。 可选值有：
 re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同） M(MULTILINE): 多行模式，改变&amp;rsquo;^&amp;lsquo;和&amp;rsquo;$&amp;lsquo;的行为（参见上图） S(DOTALL): 点任意匹配模式，改变&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>3.玩卷积神经网络</title>
      <link>https://tangg9646.github.io/post/%E7%8E%A9%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Fri, 29 Nov 2019 10:25:31 +0800</pubDate>
      
      <guid>https://tangg9646.github.io/post/%E7%8E%A9%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid>
      <description> 有趣的卷积神经网络，手写数字识别，交互式的可视化网站 最近在看B站看到关于神经网络的讲解视频，up主：同济子豪兄
连接如下：三分钟走进卷积神经网络
更详细的讲解卷积神经网络的系列视频：https://www.bilibili.com/video/av77378145
视频中提到的网站为：http://www.scs.ryerson.ca/~aharley/vis/conv/
网站可视化中的神经网络架构为：
 6个卷积核的卷积层 池化层 16个卷积核的卷积层 池化层 密集连接层 密集连接层（softmax激活函数输出10个分类）  </description>
    </item>
    
    <item>
      <title>2.机器学习经典算法--代码整理</title>
      <link>https://tangg9646.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 27 Nov 2019 19:33:29 +0800</pubDate>
      
      <guid>https://tangg9646.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/</guid>
      <description>本文整理了入门python机器学习最基本的算法，可作为手册使用
梳理了python代码，方便快速从这个手册中构建出相应的代码应用于自己的项目中
1.KNN 分类算法 由于knn算法涉及到距离的概念，KNN 算法需要先进行归一化处理
1.1 归一化处理 scaler from sklearn.preprocessing import StandardScaler standardScaler =StandardScaler() standardScaler.fit(X_train) X_train_standard = standardScaler.transform(X_train) X_test_standard = standardScaler.transform(X_test)  归一化之后送入模型进行训练
from sklearn.neighbors import KNeighborsClassifier knn_clf = KNeighborsClassifier(n_neighbors=8) knn_classifier.fit(X_train_standard, y_train) y_predict = knn_clf.predict(X_test_standard) # 默认的预测指标为分类准确度 knn_clf.score(X_test, y_test)  1.2 网格搜索 GridSearchCV 使用网格搜索来确定KNN算法合适的超参数
from sklearn.model_selection import GridSearchCV param_grid = [ { &#39;weights&#39;:[&#39;uniform&#39;], &#39;n_neighbors&#39;:[ i for i in range(1, 11)] }, { &#39;weights&#39;:[&#39;distance&#39;], &#39;n_neighbors&#39;:[i for i in range(1, 11)], &#39;p&#39;:[p for p in range(1, 6)] } ] grid_search = GridSearchCV(knn_clf, param_grid, n_jobs=-1, verbose=2) grid_search.</description>
    </item>
    
    <item>
      <title>1.搭建hugo个人博客</title>
      <link>https://tangg9646.github.io/post/%E6%90%AD%E5%BB%BAhugo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 27 Nov 2019 17:58:59 +0800</pubDate>
      
      <guid>https://tangg9646.github.io/post/%E6%90%AD%E5%BB%BAhugo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>本内容整理于哔哩哔哩up主，CodeSheep
连接如下：手把手教你从0开始搭建自己的个人博客 |第二种姿势 | hugo
分享给想要搭建个人博客的朋友。
1. 常用框架 hexo 静态的 js 博客
jekyllrb 静态
hugo 基于go语言
官网：gohugo.org
vuepress 网址：vuepress.vuejs.org
solo 网址：solo.org
2. hugo博客搭建 本示例是在Windows平台下搭建。
过程中出现其他问题可以查看：
https://www.gohugo.org hugo中文文档
1. 安装hugo工具  安装Windows安装管理工具 scoop
 安装完scoop之后，直接运行命名
scoop install hugo下载博客主题  注意观察hugo的安装目录
  需要已经下载安装好Git到自己的电脑上
并且已经申请注册了github账号，可以创建自己的仓库
推荐把git版本管理工具的基本操作学习一下：廖雪峰Git教程
2. 在本地创建博客目录 使用Hugo快速生成站点，比如希望生成到 C:/Uesr/TG 路径：
hugo new sie C:/User/TG/tgblog  执行完命名后即可在对应目录下找到该文件夹
3. 下载hugo主题 网址为： huogo-themes
使用命令行进入创建的tgbolg文件夹
cd C:/User/TG/tgblog  将选定好的主题，通过git命名下载到theme文件夹
git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c  4.</description>
    </item>
    
  </channel>
</rss>